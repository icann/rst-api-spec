openapi: 3.1.0

#mode quote
#define EXTERNAL_USER_ACCESS_CONTROL_POLICY Users can only perform this operation if their certificate matches a `TLSA` record published in the DNS at one of the hostnames specified in the `clientIDs` property of the test request object.
#define INTERNAL_USER_ACCESS_CONTROL_POLICY Internal users can perform this operation on any object.

tags:
  - name: Creating test request objects
  - name: Providing input parameters & files
  - name: Retrieving test information
  - name: Starting test runs
  - name: Test administration
  - name: IDN table management

info:
  version: "1.#date %Y%j"

  title: ICANN Registry System Testing (RST) API
  contact:
    name: ICANN Global Support
    email: globalsupport@icann.org
  license:
    name: BSD 3-Clause "New" or "Revised" License
    identifier: BSD-3-Clause

  description: |

    _[RST-API Specification Home Page](/)_

    _Last updated: #date %Y-%m-%d_

    <br><br>
    The Registry System Testing (RST-API) provides a
    [RESTful](https://en.wikipedia.org/wiki/REST) interface to ICANN's [Registry
    System Testing](https://www.icann.org/resources/registry-system-testing)
    platform, which is used to conduct conformance tests of [critical registry
    functions](https://www.icann.org/registry-transition-processes-en#:~:text=Critical%20Functions:,registry%20data%20escrow)
    at various points during the lifecycle of a gTLD (before initial delegation,
    before the [transition to a new Registry Service
    Provider](https://www.icann.org/resources/material-subcontracting-arrangement),
    or before the approval of new [registry
    services](https://www.icann.org/resources/pages/rsep-2014-02-19-en)). It
    will also used by the forthcoming [Registry Service Provider (RSP)
    Pre-Evaluation Program](https://community.icann.org/display/SPIR/RSP+%7C+Registry+Service+Provider+Pre-Evaluation).

    ### Workflow overview

    The sequence diagram below describes the process by which tests are
    scheduled, configured, and executed, in the context of the RSP Evaluation
    Program:

    * [High-level workflow](etc/workflow.svg)

    ### State diagram

    Each test request object has a `status` property (see the `testStatus`
    schema below) indicating its position in the test lifecycle. The following
    state diagram describes this lifecycle:

    * [State diagram](etc/test-object-state-machine.svg)

    ### Role-based access control

    This API implements Role-Based Access Control, where access to certain
    operations is restricted based on the role that is assigned to a user. For
    example, external users cannot create new test request objects in the
    production environment, but can in OT&E.

    ### Authentication

    All access to the API is authenticated using TLS certificates that are
    authenticated using `TLSA` records published in the DNS. Test request
    objects are associated with DNS hostnames; if a user presents a
    certificate which matches one of the `TLSA` records published in the DNS at
    one of these hostnames, it will be permitted to perform operations on that
    object.

    #### Internal users

    Internal users must use a certificate that matches a `TLSA` record
    found at a hard-coded DNS hostname *(the exact name is yet to be
    determined)*.

    ### HTTP status codes

    In addition to the HTTP status codes described in the operations
    specifications below, all operations may respond to requests with one of the
    following HTTP status codes:

    * **400:** returned when the server receives a malformed request.
    * **403:** returned when the access control policy prevents access.
    * **404:** returned when the resource does not exist.
    * **405:** returned when the request method is invalid.
    * **409:** returned when the client attempts to overwrite an resource that
      already exists.
    * **429:** returned when the client has exceeded rate limits.
    * **504:** returned when an intermediate proxy experiences an error.
    * **500:** returned when there has been an internal server error.

    ### Change Log

    * 2023-02-28:
      * As per the last release, only a single YAML file is now built from the
        source file, that contains both "internal" and "external" endpoints. The
        "internal" view is no longer published.
      * The `securitySchemes` property has been removed since code generators
        don't seem to offer good support for mutual TLS. The requirement for
        client TLS authentication has not changed, however.
      * To facilitate use of code generators, where the `patternProperties` 
        feature of JSON Schema has been used, these have been changed to avoid
        their use. Some may still be present in the input parameters.
      * Renamed the `supportLevel` property to `variantSupportLevel`.
    * 2023-02-21:
      * Test properties (such as `applicationId` and `rsp`) that were previously
        ignored in OT&E now **MUST** be omitted.
      * When IDN table objects are created in OT&E, they **MUST** have a
        `isReferenceLGR` property that is `true`.
      * Simplified object schemas by marking properties as required (and others
        as therefore optional) avoiding the need to have nullable properties.
      * IDN tables are now referenced by a unique ID rather than the `{rsp, tag,
        version}` triple.
      * The internal and external views are now identical. The separate files
        will be removed in the next release.
      * Removed redundant `type` properties for types which have an `enum`
        property.
      * Added the `supportLevel` property to the `idnTableRef` type.
      * Some IDN table management endpoints are now accessible to external
        clients.
      * Make access control policies clearer and more consistent.
      * Remove `DELETE /tests/{id}` endpoint.
      * Fix schema definition for the `Location` header in `POST /test`
        responses.
      * Changes only relevant to internal users:
        * Change the `client` parameter to `GET /tests` to `rsp`.
        * Reinstate query parameters for `GET /tables`.
        * The `PATCH /test/{id}` endpoint has been replaced with `POST
          /test/{id}/run` and `POST /test/{id}/result`.
        * Simplified IDN table management, so that test labels are provided when
          the table object is created.

    * 2024-02-14:
      * Switch to a weekly release cycle.
      * Use a date-based version number instead of a commit-based version, ahead
        of switching to a weekly release cycle.

    * 2024-01-31:
      * Add this change log.
      * Minimise the delta between the internal and external view.

    _Copyright #date %Y ICANN. All rights reserved._

servers:
  - url: https://api.rst.icann.org/v1
    description: production server address (NOT FINAL)
  - url: https://api.rst.ote.icann.org/v1
    description: OT&E server address (NOT FINAL)

paths:
  /test:
    post:
      tags:
        - Creating test request objects
      description: |
        This operation creates a new test request object.

        This operation is not available to external users in production, but may
        be used in OT&E.
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testRequest"
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"

  /test/{id}:
    parameters:
      - name: id
        description: the test ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Retrieving test information
      description: |
        This operation returns information about a specific test request object.

        EXTERNAL_USER_ACCESS_CONTROL_POLICY

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      operationId: getTestInfo
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"

  /test/{id}/inputs:
    post:
      tags:
        - Providing input parameters & files
      description: |
        This operation submits test input parameters. Parameters in the payload
        will previously submitted values. Values that are present in the object
        but not present in the payload will not be modified.

        Input parameters can only be submitted for test request objects that
        have the status of `inputs-needed`.

        EXTERNAL_USER_ACCESS_CONTROL_POLICY

        INTERNAL_USER_ACCESS_CONTROL_POLICY

        Once all required input parameters have been submitted (and any files
        referenced in those parameters have been uploaded), the status of
        the test request object will change from `input-needed` to
        `inputs-complete`.
      operationId: setTestInputParameters
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/inputParameters"
      responses:
        '201':
          description: A successful result.

  /test/{id}/files:
    post:
      tags:
        - Providing input parameters & files
      description: |
        This resource may be used to upload files. Multiple files may
        be uploaded in a single request. If a filename matches a previously
        submitted file, that file will be replaced.

        All files MUST be referenced in an input parameter **before** being
        uploaded.

        EXTERNAL_USER_ACCESS_CONTROL_POLICY

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      operationId: uploadFile
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: A successful result.

  /test/{id}/file/{file}:
    get:
      tags:
        - Retrieving test information
      description: |
        This retrieves an uploaded file.

        EXTERNAL_USER_ACCESS_CONTROL_POLICY

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      operationId: getFile
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
        - name: file
          description: the file name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful result.
          content:
            "application/octet-stream":
              schema:
                type: string
                format: binary

  /test/{id}/run:
    parameters:
      - name: id
        description: the test ID
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Starting test runs
      operationId: startTestRun
      description: |
        This operation asks the test system to start a new test run. If test
        object's status property is `inputs-complete`, a `201` status will be
        returned; otherwise a `400` status will be returned.
      responses:
        '201':
          description: A succesful result.

  /test/{id}/result:
    parameters:
      - name: id
        description: the test ID
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Test administration
      operationId: setTestResult
      description: |
        **Internal users only**

        This operation allows the `result` property of a test request to be
        overridden. The current value of this propert **MUST** be either
        `exception` or `fail`. If successful, the `result` property will be
        changed to `pass`.
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              required:
                - pass
              properties:
                pass:
                  enum:
                    - 1
      responses:
        '201':
          description: A succesful result.

  /tests:
    get:
      tags:
        - Retrieving test information
      description: |
        This operation performs a search on the database and returns all
        matching results.

        External users will only see results where their certificate
        matches a `TLSA` record published in the DNS at one of the hostnames
        specified in the `clientIDs` property of the test request object.

        Internal users will see results for all users.
      operationId: getTests
      parameters:
        - name: rsp
          description: limit results to a specific RSP (internal users only).
          in: query
          required: false
          schema:
            type: string
        - name: tld
          description: limit results to a specific TLD (internal users only).
          in: query
          required: false
          schema:
            type: string
        - name: applicationID
          description: |
            limit results to specific a application ID (internal users only).
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: limit results to those with the given status.
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/testStatus"
        - name: result
          description: limit results to those with the given result.
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/testResult"
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/testRequestSubmitted"

  /table:
    post:
      tags:
        - IDN table management
      operationId: createIDNTable
      description: |
        This operation creates a new IDN table object.

        IDN table objects must be created before they can be referenced in a
        test request.

        This operation is not available to external users in production, but may
        be used in OT&E.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/idnTable"
      responses:
        '201':
          description: A successful result.
          headers:
            location:
              description: the URL of the newly created IDN table object.
              schema:
                type: string
                format: url

  /table/{id}:
    parameters:
      - name: id
        description: the table ID.
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - IDN table management
      operationId: getIDNTable
      description: |
        This operation returns information about an IDN table object.

        External users can only access IDN tables that are linked to test
        objects associated with their credentials.

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      responses:
        '200':
          description: A successful result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/idnTable"

    put:
      tags:
        - IDN table management
      operationId: updateIDNTable
      description: |
        This operation updates an existing IDN table object.

        External users can only access IDN tables that are linked to test
        objects associated with their credentials.

        This operation is not available to external users in production, but may
        be used in OT&E.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/idnTable"
      responses:
        '201':
          description: A successful result.

    delete:
      tags:
        - IDN table management
      operationId: deleteIDNTable
      description: |
        This operation deletes an IDN table object.

        External users can only access IDN tables that are linked to test
        objects associated with their credentials.

        This operation is not available to external users in production, but may
        be used in OT&E.

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      responses:
        '201':
          description: A successful result.

  /tables:
    get:
      tags:
        - IDN table management
      operationId: getIDNTables
      description: |
        This operation returns the IDN tables matching the provided query
        parameters.

        External users can only access IDN tables that are linked to test
        objects associated with their credentials.

        INTERNAL_USER_ACCESS_CONTROL_POLICY
      parameters:
        - name: rsp
          description: the RSP ID (internal users only).
          in: query
          required: false
          schema:
            type: string
        - name: tag
          description: the language tag.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/idnTable"

components:

  securitySchemes:
    mTLS:
      name: mTLS
      in: header
      type: mutualTLS
      description: |
        Client certificates are required. Authorization to perform operations is
        determined using `TLSA` records published in the DNS under hostnames
        associated with test objects.

  schemas:
            
    testRequest:
      description: |
        This object type is used to define the properties of a new test request
        object. The `testRequestSubmitted` type inherits from it.
      type: object
      required:
        - tlds
        - testPlan
      properties:
        applicationID:
          description: |
            For RSP evaluation, the application ID, otherwise it should be
            omitted. In OT&E, this **MUST** be omitted.
          type: string
          examples: [fd327b44-b818-4f37-9349-a15bc5f230da]
        rsp:
          description: |
            The RSP's unique ID.

            In OT&E, this **MUST** be omitted, and will be populated using the
            FQDN of the first `TLSA` record which matches the certificate
            presented by the client.
          type: string
          examples: ["RSP2312-M51", "tlsa.rsp.tech"]
        tlds:
          description: |
            This structure describes the TLDs to which the test relates. It is
            an array which contains an array of logically grouped TLDs (such as
            those with a variant relationship).

            Simple example of an ASCII TLD with no IDN tables:
            ```
            {
              "tlds": [
                [
                  {
                    "string": "example",
                    "idnTables": []
                  }
                ]
              ]
            }
            ```

            In RSP testing testing, this property will only contain a single
            TLD, but more complex sets of TLDs with variants are supported for
            pre-delegation testing.

            Example of an ASCII TLD with one or more IDN tables:
            ```
            {
              "tlds": [
                [
                  {
                    "string": "example",
                    "idnTables": [
                      {
                        "id": "06e6ab5b-0e7a-4ff2-8e67-d6320e5ef4b7",
                        "variantSupportLevel": 0,
                      },
                      {
                        "id": "25eb306b-1fb0-4def-bf01-fa18815f614b",
                        "variantSupportLevel": 0,
                      }
                    ]
                  }
                ]
              ]
            }
            ```

            Example of a set of variant TLDs:
            ```
            {
              "tlds": [
                [
                  {
                    "string": "xn--8pvxs",
                    "idnTables": [
                      {
                        "id": "06e6ab5b-0e7a-4ff2-8e67-d6320e5ef4b7",
                        "variantSupportLevel": 3,
                      }
                    ]
                  },
                  {
                    "string": "xn--8pvz8d",
                    "idnTables": [
                      {
                        "id": "3f60939b-b7bf-46db-9004-126bf08923af",
                        "variantSupportLevel": 3,
                      }
                    ]
                  }
                ]
              ]
            }
            ```

            All the IDN tables referenced in this property **MUST** already
            exist when the test object is created. In OT&E, 

            If a TLD offers registrations at the third or higher levels, then at
            least one second-level "registry-class" domain name(s) should be
            separately listed, rather than the TLD itself.
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/tldInfo"
        clientIDs:
          description: |
            An array of FQDNs at which one or more `TLSA` records may be found
            which can be used for authentication.

            In OT&E, this **MUST** be omitted, but the resulting test will be
            populated with the FQDN of the first `TLSA` record which matches the
            certificate presented by the client.
          type: array
          items:
            type: string
            format: hostname
          examples: [[tlsa.rsp.tech, tlsb.rsp.tech]]
        testPlan:
          description: |
            The test plan to be followed. A list of test plans and the permitted
            values for this property may be found at
            <https://icann.github.io/rst-test-specs/rst-test-specs.html#test-plans>.
          enum:
#exec echo importing test plan mnemonics from the RST test specs... 1>&2
#exec curl -s https://icann.github.io/rst-test-specs/rst-test-specs.yaml | yq -I 8 '."Test-Plans" | keys' | while read l ; do echo "            $l" ; done
#exec echo done 1>&2
        dueDate:
          description: |
            The date/time before which the test must be passed. If `null`, the
            test remains open indefinitely (unless the `completed` status is
            reached).

            In OT&E, this **MUST** be omitted.
          type: 
            - string
            - "null"
          format: date-time

    testStatus:
      description: |
        A string indicating the status of a test request object.

        1. The `inputs-needed` value indicates that the request has been
           received, but input parameters are needed before the test can
           begin.
        2. The `inputs-complete` value indicates that all the required
           input parameters and files have been provided.
        3. The `idn-labels-needed` value indicates that test labels for one or
           more IDN tables have not yet been loaded into the system. If one or
           more "custom" IDN tables have been specified for the test, then ICANN
           staff may need to prepare these labels.
        4. The `in-progress` value indicates that a test run has started,
           but has not yet been completed.
        5. The `completed` value indicates that the test run has completed.
        6. The `expired` value indicates that the test did not have a status
           of `completed` when the `dueDate` was reached.

        * [State diagram](etc/test-object-state-machine.svg)
      enum:
        - inputs-needed
        - inputs-complete
        - idn-labels-needed
        - in-progress
        - completed
        - expired
      default: inputs-needed

    testResult:
      description: |
        A string indicating the result of a test request object.

        1. The `pass` value indicates that the test run completed with no
           errors.
        2. The `fail` value indicates that at least one test failed.
        3. The `exception` value indicates that an internal issue prevented
           the test run from completing.
      enum:
        - pass
        - fail
        - exception

    idnTableRef:
      description: |
        An `idnTableRef` object provides a reference to an IDN table object. IDN
        table objects must be created prior to being referenced in a test
        request.
      type: object
      required:
        - id
        - variantSupportLevel
      properties:
        id:
          description: The unique ID of the table.
          type: string
          examples: [ecad7860-66e1-456d-8359-0139d9b19f0e]
        variantSupportLevel:
          description: |
            The level of variant supported offered. Possible values are:
            * `0` - no variants supported
            * `1` - variants are blocked
            * `2` - variants under the same TLD may be allocated
            * `3` - variants under variant TLDs may be allocated
          type: integer
          minimum: 0
          maximum: 3

    tldInfo:
      description: |
        A top-level domain (or equivalent registry-class domain name) and its
        associated IDN tables.
      type: object
      required:
        - name
        - idnTables
      properties:
        name:
          description: The TLD (or equivalent registry-class domain name).
          type: string
          format: hostname
          examples: [example]
        idnTables:
          description: the IDN tables(s) for the TLD.
          type: array
          items:
            $ref: "#/components/schemas/idnTableRef"

    testRequestSubmitted:
      description: |
        This type describes a test request object that has been successfully
        submitted. It inherits all the properties defined in the
        `testRequest` type.
      type: object
      required:
        - tlds
        - testPlan
        - testPlanVersion
        - dateRequested
        - status
        - result
        - inputs
      allOf:
        - $ref: "#/components/schemas/testRequest"
      properties:
        id:
          description: Unique ID for this test request object.
          type: integer
          format: uint64
          examples: [60f71ce9-2428-4eb0-97e1-e34fb2f63d68]

        testPlanVersion:
          description: |
            The version of the Test Plan that will be used for the test. This
            will be determined using the `Version` property of the [RST Test
            Specifications](https://icann.github.io/rst-test-specs/rst-test-specs.html)
            and follows the [Semantic Versioning](https://semver.org)
            convention.
          type: string
          pattern: ^\\d+(\\.\\d+)+$
          examples: [3.0.0]

        dateRequested:
          description: date/time when this request was submitted.
          type: string
          format: date-time

        dateUpdated:
          description: date/time when this request was last updated.
          type: string
          format: date-time

        dateStarted:
          description: date/time when the test run (if any) started.
          type: string
          format: date-time

        dateCompleted:
          description: date/time when the test run (if any) completed.
          type: string
          format: date-time

        status:
          description: The status of this request.
          schema:
            $ref: "#/components/schemas/testStatus"
          examples: ["inputs-needed"]

        result:
          description: The outcome of the test.
          schema:
            $ref: "#/components/schemas/testResult"
          examples: [pass]

        errorCodes:
          description: |
            if the result of the test is a fail or an error, then this property
            will contain any `ERROR` or `CRITICAL` error codes generated by the
            test run. Otherwise it will be omitted.
          type: array
          items:
            type: string
          examples: [[EPP_HOSTNAME_NOT_RESOLVED]]

        inputs:
          description: Any input parameters provided by the user.
          type: object
          schema:
            $ref: "#/components/schemas/inputParameters"
          examples: [{"example.name": "example.value"}]

        missingInputs:
          description: |
            An array listing any required input parameters that have not yet
            been provided.
          type: array
          items:
            type: string
          examples: [["epp.kitchenSink", "rdap.coffeePotURL"]]

        files:
          description: A list of any files uploaded.
          type: array
          items:
            type: object
            properties:
              name:
                description: the file name.
                type: string
                examples: [example_20231008_full_S1_R0.ryde]
              type:
                description: the media type of the file.
                type: string
                examples: [application/octet-stream]
              uploaded:
                description: when the file was uploaded.
                type: string
                format: date-time
              href:
                description: the URL of the file.
                type: string
                format: url
                examples: [https://api.rst.icann.org/v1/test/987654321/files/example_20231008_full_S1_R0.ryde]

        results:
          description: |
            A test may result in multiple "runs". Each run is represented by a
            `testRunLog` which contains a number of `testCaseLog` entries.

            The `results` property is an array of `testRunLog` objects. This
            property will initially be an empty array, until a test run is
            started. When the test run starts, an empty `testRunLog` object will
            be added to the array. As the test progresses, `testCaseLog` entries
            will be appended to the `testRunLog` object.
          type: array
          items:
            $ref: "#/components/schemas/testRunLog"

    inputParameters:
      description: |
        Users must provide various input parameters to be used within test
        cases. An `inputParameters` object is used when users submit these
        parameters after a test request object is created, and is also used when
        returning test request object information.
      type: object
      properties:
#exec bin/generate-input-parameter-schema.pl | sed 's/^/        /'
      required: []

    testRunLog:
      description: an object representing a discrete test run.
      type: object
      required:
        - runID
        - dateStarted
        - dateCompleted
        - result
        - log
      properties:
        runID:
          description: unique ID for this test run.
          type: string
          examples: [33cb14d8-1aa1-4b7c-8f54-8604f45397d6]
        dateStarted:
          description: the date and time the run started.
          type: string
          format: datetime
        dateCompleted:
          description: the date and time the run finished.
          type: string
          format: datetime
        result:
          description: The outcome of the test.
          schema:
            $ref: "#/components/schemas/testResult"
        log:
          description: an array of test case log objects.
          type: array
          items:
            $ref: "#/components/schemas/testCaseLog"

    testCaseLog:
      description: A detailed log of an individual test case.
      type: object
      required:
        - caseID
        - caseRef
        - result
        - description
        - dateStarted
        - dateCompleted
        - log
        - context
      properties:
        caseID:
          description: the Test Case ID.
          type: string
          examples: [epp-01]
        caseRef:
          description: a link to the test case specification
          type: string
          format: url
          examples: [https://icann.github.io/rst-test-specs/rst-test-specs.html#Test-Case-epp-01]
        result:
          description: |
            The result of the test. The possible values are:
            * `pass` - the test passed.
            * `fail` - the test was not passed.
            * `exeception` - an error occurred which meant a result could not be
              determined. This indicates an issue on the RST test system side,
              not the test subject's.
            * `skipped` - the test case was not applicable and was not carried
              out.
            * `aborted` - the test case was aborted before it could complete.
          enum:
            - pass
            - fail
            - exeception
            - skipped
            - aborted
        description:
          description: A short description of the outcome of the test.
          type: string
          examples: ["successfully resolved epp.hostname for IPv4 and IPv6"]
        dateStarted:
          description: date/time when the test case started.
          type: string
          format: date-time
        dateCompleted:
          description: date/time when the test case finished.
          type: string
          format: date-time
        log:
          description: detailed test logs
          type: array
          items:
            $ref: "#/components/schemas/testCaseLogMessage"
        context:
          description: |
            an object containing context parameters (eg input parameters,
            software versions, environment variables, etc). These are intended
            to assist in debugging any issues that may have caused the test case
            to fail or error.
          type: object
          additionalProperties:
            type:
              - string
              - integer
              - number
              - boolean
              - "null"
          examples: [{"important.note": "the contents of this object are purely illustrative", "host.name": "node01.rst", "host.ips": ["192.0.2.32", "fe80::79b5:adbc:141e:b15e"], "user.name": "rst", "dig.version": "DiG 9.10.6", "host.os": "Linux", "host.arch": "amd64", "epp.hostname": "epp.rsp.tech"}]

    testCaseLogMessage:
      description: A log message.
      type: object
      required:
        - code
        - codeRef
        - severity
        - timestamp
        - message
      properties:
        code:
          description: the error code (if any).
          type:
            - string
            - "null"
          default: null
        codeRef:
          description: a link to a description for the error code (if any).
          type:
            - string
            - "null"
          format: url
          examples: [https://icann.github.io/rst-test-specs/rst-test-specs.html#Error-EPP_ERROR_DNS_RESOLUTION_FAILED]
        severity:
          description: |
            The log level of the message, a subset of the values defined in
            RFC5424.
          enum:
            - WARNING
            - ERROR
            - CRITICAL
          default: WARNING
        timestamp:
          description: |
            the timestamp when the message was generated.
          type: string
          format: date-time
        message:
          description: the message.
          type: string
          examples: ["Something informative just happened!", "Something critical just happened!"]

    idnTable:
      description: |
        This object describes an IDN table, or more specifically, an RSP's
        implementation of such a table.

        The `rsp`, `tag` and `version` properties of this object uniquely
        identify it, and can be used to populate the corresponding tokens in the
        URL templates of the `getIDNTable()` and `getIDNLabels()` operations.
      type: object
      required:
        - id
        - rsp
        - tag
        - version
        - isReferenceLGR
        - variantPolicy
      properties:
        id:
          description: A unique ID for this table.
          type: string
          examples: [570cb051-4f60-483a-be35-c03a98a7a846]
        rsp:
          description: the RSP's unique ID.
          type: string
          examples: [RSP2312-M51]
        tag:
          description:
            the language tag, which must conform to the specification in RFC
            5646.
          type: string
          examples: [und-Arab]
        version:
          description: the version number.
          type: string
          examples: [1.1]
        isReferenceLGR:
          description: |
            whether the RSP's implementation of the IDN table uses a Second-
            Level Reference Label Generation Rules (LGRs) developed by ICANN.

            If the value of this property is `false`, then the `lgrXML` property
            **MUST** be populated with the RSP's LGR in XML format (see RFC
            7940). If it is `true`, then the `lgrXML` property **MUST** be
            omitted.

            In OT&E, this value **MUST** be `true`, as custom LGRs cannot be
            tested in OT&E.

            For more information on ICANN's Second-Level LGRS, please see:

              * <https://www.icann.org/resources/pages/second-level-lgr-2015-06-21-en>
          type: boolean
        variantPolicy:
          description: |
            The variant policy supported for this table. The possible values
            are:

            * `novar` - no variants are supported/applicable
            * `allblockvar` - all variants are blocked
            * `mayallocatevar` - variants may be allocated
          enum:
            - novar
            - allblockvar
            - mayallocatevar
        lgrXML:
          description: |
            For custom implementations (see the `isReferenceLGR` property), this
            property **MUST** contain the RSP's LGR in XML format. For standard
            implementations (where `isReferenceLGR` is `true`) it **MUST** be
            omitted.
          type: string
          examples: [<lgr xmlns="urn:ietf:params:xml:ns:lgr-1.0"><!--...--></lgr>]
        testLabels:
          description: |
            The test labels to be used in association with this table. In OT&E,
            this **MUST** be omitted.
          $ref: "#/components/schemas/idnTestLabels"

    idnTestLabels:
      description: An object containing IDN test labels.
      type: object
      required:
        - validLabels
        - invalidLabels
      properties:
        validLabels:
          description: |
            A mapping of **valid** IDN labels to any variant labels thereof.
          type: array
          minItems: 1
          items:
            type: object
            required:
              - label
              - variants
            properties:
              label:
                type: string
                pattern: "^[a-z][a-z0-9\\-]+[a-z]$"
                examples: [xn--8pvxs]
              variants:
                type: array
                minItems: 0
                items:
                  type: string
                  pattern: "^[a-z][a-z0-9\\-]+[a-z]$"
                  examples: [xn--8pvz8d]
        invalidLabels:
          description: |
            A list of **invalid** IDN labels that it should not be possible to
            register.
          type: array
          minItems: 1
          items:
            type: string
            pattern: ^[a-z][a-z0-9\\-]+[a-z]$
          examples: [[xn--ls8h]]
