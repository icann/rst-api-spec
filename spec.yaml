---
openapi: 3.1.0

externalDocs:
  url: https://www.icann.org/resources/registry-system-testing
  description: More information

info:
  title: ICANN RST-API
  summary: ICANN Registry System Testing (RST) API.
  description: |
    The Registry System Testing (RST-API) provides a simple RESTful interface
    to ICANN's Registry System Testing environment, which is used to conduct
    conformance tests of the critical registry systems during the lifecycle of
    a gTLD (before initial delegation, before the transition to a new Registry
    Service Provider, or before the approval of various Registry Services).

    This API can be used to submit requests for tests, and to review the
    outcome of those tests.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Copyright 2023 Internet Corporation for Assigned Names and Numbers (ICANN).
  version: 1.1.0
  termsOfService: https://www.icann.org/resources/registry-system-testing
  contact:
    name: ICANN
    url: https://www.icann.org/
    email: rst@icann.org
  license:
    name: BSD 3-Clause "New" or "Revised" License
    identifier: BSD-3-Clause

servers:
  - url: https://api.rst.icann.org/v1
    description: Production server
  - url: https://api.rst-test.icann.org/v1
    description: Test server
  - url: https://api.rst-staging.icann.org/v1
    description: Staging server

mTLS: []

components:
  securitySchemes:
    mTLS:
      name: Mutual TLS
      type: mutualTLS
      description: |
        Each API client is associated with a fully-qualified domain name (FQDN),
        at which one or more `TLSA` records are published. Clients must present
        a certificate which matches one of these records.

        There are two kinds of clients:

        1. ICANN-internal clients which have "superuser" privileges
        2. RSPs, who have limited privileges over objects associated with their
           client ID (FQDN).

        For internal clients, FQDNs are hard-coded into the system. For RSPs
        they are attributes of test objects.

  schemas:
    tldSet:
      description: |
        A list of logically grouped TLDs. For a traditional ASCII TLD, this is
        just an array containing a single string, but for IDN TLDs or variant
        TLDs, it is an array of two or more strings.
      type: array
      items:
        type: string
        format: hostname
        pattern: ^([a-z][a-z\-]*[a-z]|xn--[a-z0-9\-]*[a-z0-9])$
        maxLength: 63
        minLength: 3
        examples: [example]
      minItems: 1
      examples: [[example], [foo, bar]]

    testRequest:
      description: |
      type: object
      properties:
        tlds:
          description: |
            An array of TLDSet objects to which this test relates. In most cases
            this will just be something like `[["example"]]` but more complex
            sets of TLDs with variants are supported for RSP testing.
          type: array
          items:
            $ref: "#/components/schemas/tldSet"
          minItems: 1

        clientID:
          description: |
            An FQDN which identifies the RSEP, and at which one or `TLSA`
            records may be found which can be used for authentication.
          type: string
          format: hostname
          examples: [tlsa.rsp.tech]

        testPlan:
          description: the test plan to be followed.
          type: string
          enum:
            - StandardPreDelegationTest
            - StandardRSPChangeTest
            - DNSRSPChangeTest
            - IDNTest
            - SRSGatewayTest
            - StandardRSPEvaluationTest
            - DNSRSPEvaluationTest
            - DNSSECRSPEvaluationTest

    testRequestSubmitted:
      description: |
        This type describes a test request that has been successfully
        submitted. It inherits all the properties defined in the
        `testRequest` type.
      type: object
      allOf:
        - $ref: "#/components/schemas/testRequest"
      properties:
        id:
          description: Unique ID for this test request.
          type: integer
          format: uint64
          examples: [987654321]

        dateRequested:
          description: date/time when this request was submitted.
          type: string
          format: date-time

        dateStarted:
          description: date/time when the test run started (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        dateCompleted:
          description: date/time when the test run finished (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        status:
          description: |
            The status of this request.
            1. The **inputs-needed** value indicates that the request has been
               received, but input parameters are needed before the test can
               begin.
            2. The **pending** value indicates that all required input
               parameters have been provided, but the test run has not yet
               started.
            3. The **in-progress** value indicates that the test run has
               started, but has not yet been completed.
            4. The **completed** value indicates that the test run has
               completed.
          type: string
          enum:
            - inputs-needed
            - pending
            - in-progress
            - completed
          default: inputs-needed

        result:
          description: |
            The outcome of the test run.
            1. The **pass** value indicates that the test run completed with no
               errors.
            2. The **fail** value indicates that at least one test failed.
            3. The **error** value indicates that an internal issue prevented
               the test run from completing.

            This value will be **null** unless the value of the *status*
            property has the value **completed**.
          type:
            - string
            - "null"
          enum:
            - pass
            - fail
            - error
          default: null

        inputs:
          description: |
            Any input parameters provided by the RSP.
          type: array
          items:
            $ref: "#/components/schemas/inputParameters"
        results:
          description: |
            A detailed log of all tests carried out.
          type: array
          items:
            $ref: "#/components/schemas/testCaseLog"

    inputParameters:
      description: |
      type: object
      properties:
        dns:
          description: |
            A hash map containing input parameters related to DNS tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        dnssec:
          description: |
            A hash map containing input parameters related to DNSSEC tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        epp:
          description: |
            A hash map containing input parameters related to EPP tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        rdds:
          description: |
            A hash map containing input parameters related to RDDS tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        rde:
          description: |
            A hash map containing input parameters related to RDE tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        idn:
          description: |
            A hash map containing input parameters related to IDN tests. For
            details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

        srsgw:
          description: |
            A hash map containing input parameters related to SRS Gateway tests.
            For details of the specific input parameters required, consult the
            relevant test plan documentation.
          type:
            - "null"
            - object
          additionalProperties:
            type: string
          default: null

    testCaseLog:
      description: |
        A detailed log of an individual test case.
      type: object
      properties:
        caseID:
          description: the Test Case ID.
          type: string
        result:
          description: the result of the test.
          type: string
          enum:
            - pass
            - fail
            - error
            - skipped
        description:
          description: A short description of the outcome of the test.
          type: string
        dateStarted:
          description: date/time when the test case started.
          type: string
          format: date-time
        dateCompleted:
          description: date/time when the test case finished.
          type: string
          format: date-time
        log:
          description: detailed test logs
          type: array
          items:
            type: string
        context:
          description: |
            an object containing context parameters (eg input parameters,
            environment variables, etc).
          type: object
          additionalProperties:
            type: string
paths:
  /test:
    post:
      description: |
        Create a new test object. Only internal clients can perform this
        operation.

        Once a test object has been created, the RSP identified by the
        `clientID` property can submit input parameters using a
        `POST /test/{id}/inputs` request, and request test re-runs using a
        `PATCH /test/{id}` request.

      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testRequest"
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}:
    get:
      description: |
        Get information about a specific test request.

        Internal clients can retrieve any test request; RSPs can only
        retrieve requests that they've submitted.
      operationId: getTestInfo
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

    patch:
      description: |
        If a test failed, then this operation can be used to request a re-test.

        This is achieved by submitting a `PATCH` request to set the `status`
        property of the test object to `requested`.

        This operation can only be used on tests which have the `status` of
        `completed` and `result` of `fail` or `error`. Internal clients can use
        it on any such test, while RSPs can only use it on tests associated with
        their client ID.
      operationId: restartTest
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
        - name: status
          description: |
            the new status for the test.
          in: query
          required: true
          schema:
            type: string
            enum:
              - requested

      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}/inputs:
    post:
      description: |
        Submit test input parameters.
      operationId: setTestInputParameters
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/rdap+json:
            schema:
              $ref: "#/components/schemas/inputParameters"
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /tests:
    get:
      description: |
        Retrieve a list of test requests.
        * Internal clients will see all requests
        * RSPs will see all requests associated with their client ID.
      operationId: getTests
      parameters:
        - name: client
          description: limit results to specific client (internal clients only)
          in: query
          required: false
          schema:
            type: string
        - name: tld
          description: limit results to specific TLD (internal clients only)
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: limit results to those with the given status
          in: query
          required: false
          schema:
            type: string
            enum:
              - inputs-needed
              - pending
              - in-progress
              - completed
        - name: result
          description: limit results to those with the given result
          in: query
          required: false
          schema:
            type: string
            enum:
              - pass
              - fail
              - error
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.
