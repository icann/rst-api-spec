---
openapi: 3.1.0

externalDocs:
  url: https://www.icann.org/resources/registry-system-testing
  description: More information

info:
  title: ICANN RST-API
  summary: ICANN Registry System Testing (RST) API.
  description: |
    The Registry System Testing (RST-API) provides a simple RESTful interface
    to ICANN's Registry System Testing environment, which is used to conduct
    conformance tests of the critical registry systems during the lifecycle of
    a gTLD (before initial delegation, before the transition to a new Registry
    Service Provider, or before the approval of various Registry Services).

    This API can be used to submit requests for tests, and to review the
    outcome of those tests.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Copyright 2023 Internet Corporation for Assigned Names and Numbers (ICANN).
  version: 1.0.0
  termsOfService: https://www.icann.org/resources/registry-system-testing
  contact:
    name: ICANN
    url: https://www.icann.org/
    email: rst@icann.org
  license:
    name: BSD 3-Clause "New" or "Revised" License
    identifier: BSD-3-Clause

servers:
  - url: https://api.rst.icann.org/v1
    description: Production server
  - url: https://api.rst-test.icann.org/v1
    description: Test server
  - url: https://api.rst-staging.icann.org/v1
    description: Staging server

mTLS: []

components:

  securitySchemes:
    mTLS:
      description: |
        All authentication for this API is achieved through the use of Mutual
        TLS (mTLS). API users must specify a fully-qualified domain name (FQDN)
        at which one or more `TLSA` records are published, using the `_https`
        application identifier, as per [draft-huque-dane-client-cert](https://www.ietf.org/archive/id/draft-huque-dane-client-cert-08.html#name-example-tlsa-records-for-cl)
      type: mutualTLS
      name: Mutual TLS (DANCE)

  schemas:

    eppTestParameters:
      description: Input parameters for EPP tests.
      type: object
      properties:

    rdapTestParameters:
      description: Input parameters for RDAP tests.
      type: object
      properties:

    rdeTestParameters:
      description: Input parameters for RDE tests.
      type: object
      properties:

    idnTestParameters:
      description: Input parameters for IDN tests.
      type: object
      properties:

    dnsTestParameters:
      description: Input parameters for DNS tests.
      type: object
      properties:

    dnssecTestParameters:
      description: Input parameters for DNSSEC tests.
      type: object
      properties:

    srsGatewayTestParameters:
      description: Input parameters for SRS Gateway tests.
      type: object
      properties:

    testPlanReference:
      description: |
        Instead of providing a detailed test plan, one of the following
        reference codes may be used instead.
      type: string
      enum:
        - all-tests
        - all-epp-tests
        - all-rdap-tests
        - all-rde-tests
        - all-idn-tests
        - all-dns-tests
        - all-dnssec-tests
        - all-srs-gateway-tests

    eppTestReference:
      description: Reference codes for EPP test plans.
      type: string
      enum:
        - eppTest01
        - eppTest02
        - eppTest03
        - etc

    rdapTestReference:
      description: Reference codes for RDAP test plans.
      type: string
      enum:
        - rdapTest01
        - rdapTest02
        - rdapTest03
        - etc

    rdeTestReference:
      description: Reference codes for RDE test plans.
      type: string
      enum:
        - rdeTest01
        - rdeTest02
        - rdeTest03
        - etc

    idnTestReference:
      description: Reference codes for IDN test plans.
      type: string
      enum:
        - rdeTest01
        - rdeTest02
        - rdeTest03
        - etc

    dnsTestReference:
      description: Reference codes for DNS test plans.
      type: string
      enum:
        - dnsTest01
        - dnsTest02
        - dnsTest03
        - etc

    dnssecTestReference:
      description: Reference codes for DNSSEC test plans.
      type: string
      enum:
        - dnssecTest01
        - dnssecTest02
        - dnssecTest03
        - etc

    srsGatewayTestReference:
      description: Reference codes for SRS Gateway test plans.
      type: string
      enum:
        - srsGatewayTest01
        - srsGatewayTest02
        - srsGatewayTest03
        - etc

    testPlan:
      description: |
        An object representing a test plan. A test plan is a set of
        test cases, grouped by area.
      type: object
      properties:
        eppTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/eppTestReference"
        rdapTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/rdapTestReference"
        rdeTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/rdeTestReference"
        idnTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/idnTestReference"
        dnsTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/dnsTestReference"
        dnssecTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/dnssecTestReference"
        srsGatewayTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/srsGatewayTestReference"

    testParameters:
      description: |
        This object represents the parameters provided by the client which
         will be used to carry out tests.
      type: object
      properties:
        eppTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/eppTestParameters"
        rdapTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/rdapTestParameters"
        rdeTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/rdeTestParameters"
        idnTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/idnTestParameters"
        dnsTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/dnsTestParameters"
        dnssecTestParameters:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/dnssecTestParameters"
        srsGatewayTests:
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/srsGatewayTestParameters"

    testRequest:
      allOf:
        - $ref: "#/components/schemas/testRequestBase"
      type: object

    testRequestSubmitted:
      description: |
        This type describes a test request that has been successfully
        submitted. It inherits all the properties defined in the
        `testRequestBase` type.
      allOf:
        - $ref: "#/components/schemas/testRequestBase"
      type: object
      properties:
        id:
          description: Unique ID for this test request.
          type: integer
          format: uint64
          examples: [987654321]

        requester:
          description: Unique ID for the user that submitted this request.
          type: string
          examples: [example]

        dateRequested:
          description: date/time when this request was submitted.
          type: string
          format: date-time

        inputFiles:
          description: |
            A list of fully-qualified URLs for each of the submitted input
            files.
          type: array
          items:
            type: string
            format: url

        dateStarted:
          description: date/time when the test run started (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        dateCompleted:
          description: date/time when the test run finished (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        status:
          description: |
            The status of this request.
            1. The **requested** value indicates that the request has been
               received, but a test run has not yet started.
            2. The **in-progress** value indicates that the test run has
               started, but has not yet been completed.
            3. The **completed** value indicates that the test run has
               completed.
          type: string
          enum:
            - requested
            - in-progress
            - completed
          default: requested

        result:
          description: |
            The outcome of the test run.
            1. The **pass** value indicates that the test run completed with no
               errors.
            2. The **fail** value indicates that at least one test failed.
            3. The **error** value indicates that an internal issue prevented
               the test run from completing.

            This value will be **null** unless the value of the *status*
            property has the value **completed**.
          type:
            - string
            - "null"
          enum:
            - pass
            - fail
            - error
          default: null

        testResults:
          description: |
            The result of the test run.

    testRequestBase:
      description: |
        An abstract base type which is concretised by `testRequest` and
        `testRequestSubmitted`.
      type: object
      properties:
        tld:
          description: The TLD to which this test relates in A-label format.
          type: string
          format: hostname
          pattern: ^([a-z][a-z\-]*[a-z]|xn--[a-z0-9\-]*[a-z0-9])$
          maxLength: 63
          minLength: 3
          examples: [example]

        testPlan:
          description: |
            The test plan used requested. This can either be a mnemonic code
            (`testPlanReference`) or a detailed test plan object.
          oneOf:
            - $ref: "#/components/schemas/testPlanReference"
            - $ref: "#/components/schemas/testPlan"

        testParameters:
          description: |
            The test parameters provided by the requester not included as part
            of the input files.
          oneOf:
            - $ref: "#/components/schemas/testParameters"

paths:
  /test:
    post:
      description: |
        Submit a new test request.

        This endpoint expects all input data to be provided as file uploads.

        At least one file **MUST** have the `application/json` content-type,
        which **MUST** contain a single `testRequest` object.

        All other files must correspond to the expected input files for the
        test plan, such as
          * pdtepp.xml
          * pdtwhois.xml
          * pdtidn.zip
          * etc
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary

  /test/{id}:
    get:
      description: |
        Get a specific test request.

        Superusers can retrieve any test request; normal users can only
        retrieve requests that they've submitted.
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /tests:
    get:
      description: |
        Retrieve a list of test requests.
        * normal users will see all requests they've submitted.
        * superusers will see all requests
      parameters:
        - name: client
          in: query
          required: false
          schema:
            type: string
          description: limit results to specific client (superuser access only)
        - name: tld
          in: query
          required: false
          schema:
            type: string
          description: limit results to specific TLD (superuser access only)
      responses:
        '200':
          description: A successful response.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /files/{filePath}:
    get:
      description: |
        Individual input files can be retrieved using this endpoint.
        `testPlanSubmitted` objects have an `inputFiles` property which is an
        array of fully-qualified URLs that match the URL template of this
        resource.

        Normal users can only access files associated with the test requests
        that they submitted. Superusers can access any file.
      parameters:
        - name: filePath
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The file exists.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: Returned when policy prevents access.
        '404':
          description: Returned when the requested file does not exist.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

