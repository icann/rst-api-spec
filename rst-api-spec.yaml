---
openapi: 3.1.0

externalDocs:
  url: https://www.icann.org/resources/registry-system-testing
  description: More information

tags:
  - name: Creating test requests
  - name: Providing input parameters & files
  - name: Retrieving test information
  - name: Starting, stopping and restarting tests
  - name: Test administration

info:
  title: ICANN RST-API
  summary: ICANN Registry System Testing (RST) API.
  description: |
    The Registry System Testing (RST-API) provides a simple RESTful interface
    to ICANN's Registry System Testing environment, which is used to conduct
    conformance tests of the critical registry systems during the lifecycle of
    a gTLD (before initial delegation, before the transition to a new Registry
    Service Provider, or before the approval of various Registry Services).

    This API can be used to submit requests for tests, and to review the
    outcome of those tests.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Copyright 2023 Internet Corporation for Assigned Names and Numbers (ICANN).
  version: 1.1.0
  termsOfService: https://www.icann.org/resources/registry-system-testing
  contact:
    name: ICANN
    url: https://www.icann.org/
    email: rst@icann.org
  license:
    name: BSD 3-Clause "New" or "Revised" License
    identifier: BSD-3-Clause

servers:
  - url: https://api.rst.icann.org/v1
    description: Production server
  - url: https://api.rst-test.icann.org/v1
    description: Test server
  - url: https://api.rst-staging.icann.org/v1
    description: Staging server
  - url: https://ote.rst-staging.icann.org/v1
    description: OT&E server

mTLS: []

components:
  securitySchemes:
    mTLS:
      name: Mutual TLS
      type: mutualTLS
      description: |
        Each API client is associated with a fully-qualified domain name (FQDN),
        at which one or more `TLSA` records are published. Clients must present
        a certificate which matches one of these records.

        There are three privilege levels, from highest to lowest:

        1. The Test Orchestration System (TOS) client, which is responsible for
           running tests and reporting on their results;
        2. ICANN-internal Test Administrator (TA) clients, which are able to
           create new test objects, query them, and exceptionally delete
           requests or modify their status;
        3. Registry Service Provider (RSP) clients, whose privileges are limited
           to those test requests that are associated with their client ID
           (FQDN).

        For types 1 and 2, FQDNs are hard-coded into the system. For RSPs
        they are attributes of test request objects.
  schemas:
    idnSpec:
      description: |
        An IDN set represents the IDN tables for a TLD, and the level of support
        for variants (if applicable).

        An IDN set object has properties which are IDN table IDs, and the values
        are either `null`, or integers indicating the level of support for
        variants:

        * `null`: variants are not applicable for this table ID
        * `1`: variants are not offered
        * `2`: variant labels under the same TLD are supported
        * `3`: variant labels under the variant TLDs are supported
      type: object
      additionalProperties:
        description: |
          Object properties are IDN table IDs. Property values MUST be either
          `null` or an integer indicating the variant support level.
        type: string

    tldSet:
      description: |
        A TLD set represents one or more logically grouped TLDs (such as those
        which contain IDN variants).

        A TLD set has properties which are TLD A-labels, and values which are
        objects where the properties are idnSpec objects.
      type: object
      additionalProperties:
        description: |
          Object properties are TLD labels. Property values MUST be an array of
          strings.
        type: string
        format: hostname
        pattern: ^([a-z][a-z\-]*[a-z]|xn--[a-z0-9\-]*[a-z0-9])$
        maxLength: 63
        minLength: 3

    testRequest:
      description: |
        This object type is used to define the properties of a new test request
        object. The `testRequestSubmitted` type inherits from it.
      type: object
      properties:
        applicationID:
          description: |
            For RSP evaluation, the application ID.
          type:
            - string
            - "null"
          examples: [foo123]
        tlds:
          description: |
            An array of tldSet objects to which this test relates. In most cases
            this will just be something like `[{"example": []}]` but more
            complex sets of TLDs with variants are supported for RSP testing.
          type: array
          items:
            $ref: "#/components/schemas/tldSet"
          minItems: 1
          examples: [[{"xn--8pvz8d":{"zh_CN":3},"xn--8pvxs":{"zh_TW":3}},{"xn--spcimen-cya":{"fr_FR":1,"de_DE":2}},{"example":{}}]]
        clientIDs:
          description: |
            An array of FQDNs which identify the RSEP, and at which one or more
            `TLSA` records may be found which can be used for authentication.
          type: array
          items:
            schema:
              type: string
              format: hostname
          examples: [[tlsa.rsp.tech]]
        testPlan:
          description: the test plan to be followed.
          type: string
          enum:
            - StandardPreDelegationTest
            - StandardRSPChangeTest
            - DNSRSPChangeTest
            - IDNTest
            - SRSGatewayTest
            - StandardRSPEvaluationTest
            - DNSRSPEvaluationTest
            - DNSSECRSPEvaluationTest
        dueDate:
          description: |
            The date/time before which the test must be passed. If `null`, the
            test remains open indefinitely (unless the `completed` status is
            reached).
          type: 
            - string
            - "null"
          format: date-time

    testStatus:
      description: |
        A string indicating the status of a test request.

        1. The `inputs-needed` value indicates that the request has been
           received, but input parameters are needed before the test can
           begin.
        2. The `inputs-complete` value indicates that all the required
           input parameters and files have been provided.
        3. The `ready` value indicates that all required input
           parameters and files have been provided, but the test run has not
           yet started.
        4. The `in-progress` value indicates that the test run has started,
           but has not yet been completed.
        5. The `completed` value indicates that the test run has completed.
        6. The `expired` value indicates that the test did not have a status
           of `completed` when the `dueDate` was reached.

        The following state diagram outlines how the status of a test object
        changes throughout its lifetime:

        ![state diagram](https://raw.githubusercontent.com/icann/rst-api-spec/main/test-object-state-machine.svg?token=GHSAT0AAAAAACIBFKWNBJMZ45OKMG3PEW4OZJOSQGA)
      type: string
      enum:
        - inputs-needed
        - inputs-complete
        - ready
        - in-progress
        - completed
        - expired
      default: inputs-needed

    testResult:
      description: |
        A string indicating the result of a test request.

        1. The `pass` value indicates that the test run completed with no
           errors.
        2. The `fail` value indicates that at least one test failed.
        3. The `error` value indicates that an internal issue prevented
           the test run from completing.
      type:
        - string
        - "null"
      enum:
        - pass
        - fail
        - error
      default: null

    testRequestSubmitted:
      description: |
        This type describes a test request that has been successfully
        submitted. It inherits all the properties defined in the
        `testRequest` type.
      type: object
      allOf:
        - $ref: "#/components/schemas/testRequest"
      properties:
        id:
          description: Unique ID for this test request.
          type: integer
          format: uint64
          examples: [987654321]

        dateRequested:
          description: date/time when this request was submitted.
          type: string
          format: date-time

        dateUpdated:
          description: date/time when this request was last updated.
          type:
            - string
            - "null"
          format: date-time
          default: null

        dateStarted:
          description: date/time when the test run started (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        dateCompleted:
          description: date/time when the test run finished (which may be null).
          type:
            - string
            - "null"
          format: date-time
          default: null

        status:
          description: The status of this request.
          schema:
            $ref: "#/components/schemas/testStatus"
          examples: ["inputs-needed"]
        result:
          description: The outcome of the test run.
          schema:
            $ref: "#/components/schemas/testResult"
          examples: [null]

        inputs:
          description: Any input parameters provided by the RSP.
          type: object
          schema:
            $ref: "#/components/schemas/inputParameters"
          examples: [{"epp.hostname": "epp.rsp.tech", "epp.port": 700, "epp.clid01": "clid01", "epp.pw01": "foo2bar"}]

        missingInputs:
          description: |
            An array listing any required input parameters that have not yet
            been provided.
          type: array
          items:
            type: string
          examples: [["epp.kitchSink", "rdap.coffeePotURL"]]
        files:
          description: A list of any files uploaded.
          type: array
          items:
            type: object
            properties:
              name:
                description: the file name.
                type: string
                examples: [example_20231008_full_S1_R0.ryde]
              uploaded:
                description: when the file was uploaded.
                type: string
                format: date-time
              href:
                description: the URL of the file.
                type: string
                format: url
                examples: [https://api.rst.icann.org/v1/test/987654321/files/example_20231008_full_S1_R0.ryde]
        results:
          description: |
            A detailed log of all tests carried out. This property will
            initially be an empty array, until the status of the test changes to
            `in-progress`. From this point onwards, test results will be added
            to the array as the test progresses.

            If the test fails, is aborted, or there is an error, the results of
            the last test will always be included in this property, and will not
            be overridden until a re-test begins.
          type: array
          items:
            $ref: "#/components/schemas/testCaseLog"

    inputParameters:
      description: |
        RSPs must provide various input parameters to be used within test cases.
        An `inputParameters` object is used when RSPs submit these parameters
        after a test request is created, and is also used when returning test
        request information.
      type: object
      patternProperties:
        ^(general|dns|dnssec|rdap|epp|rde|idn|srsgw)\.[A-Za-z0-9\.]+$:
          type:
            - string
            - integer
            - number
            - boolean
            - "null"
            - array
            - object
          items:
            type:
            - string
            - integer
            - number
            - boolean
            - "null"
            - object
      examples: [{"epp.hostname": "epp.rsp.tech", "epp.port": 700, "epp.clid": "CLID1", "epp.pw": "foo2bar", "epp.feeCurrency": "USD", "epp.feeAmount": 25.01, "dns.servers": ["ns1.rsp.tech", "ns2.rsp.tech"], "dnssec.KSKLength": 4096, "dnssec.nsec3": true, "rdap.hostname": "rdap.rsp.tech", "idn.tables": ["latn", "arab", "zh"], "rde.supportedTypes": ["FULL", "INCR"]}]

    testCaseResult:
      description: |
        A string indicating the status of a test case.

        * `pass` - the test passed.
        * `fail` - the test was not passed.
        * `error` - an error occurred which meant a result could not be
          determined.
        * `skipped` - the test case was not applicable and was not carried
          out.
        * `aborted` - the test case was aborted before it could complete.
      type: string
      enum:
        - pass
        - fail
        - error
        - skipped
        - aborted

    testCaseLog:
      description: A detailed log of an individual test case.
      type: object
      properties:
        caseID:
          description: the Test Case ID.
          type: string
          examples: [epp-01]
        result:
          description: the result of the test.
          schema:
            $ref: "#/components/schemas/testCaseResult"
          examples: ["pass"]
        description:
          description: A short description of the outcome of the test.
          type: string
          examples: ["successfully resolved epp.hostname for IPv4 and IPv6"]
        dateStarted:
          description: date/time when the test case started.
          type: string
          format: date-time
        dateCompleted:
          description: date/time when the test case finished.
          type: string
          format: date-time
        log:
          description: detailed test logs
          type: array
          items:
            type: string
            examples: [["starting test epp-01", "resolving epp.rsp.tech/A", "found 1 RR(s)", "resolving epp.rsp.tech/AAAA", "found 1 RR(s)", "...and so on"]]
        context:
          description: |
            an object containing context parameters (eg input parameters,
            software versions, environment variables, etc). These are intended
            to assist in debugging any issues that may have caused the test case
            to fail or error.
          type: object
          additionalProperties:
            type:
            - string
            - integer
            - number
            - boolean
            - "null"
          examples: [{"host.name": "node01.rst", "host.ips": ["192.168.0.32", "fe80::79b5:adbc:141e:b15e"], "user.name": "rst", "dig.version": "DiG 9.10.6", "host.os": "Linux", "host.arch": "amd64", "epp.hostname": "epp.rsp.tech"}]

paths:
  /test:
    post:
      tags:
        - Creating test requests
      description: |
        This operation create a new test request. Only TA clients can perform
        this operation in production; but RSP clients can use it in OT&E.

        Once a test request has been created, the RSP identified by the
        `clientID` property can submit input parameters using a
        `POST /test/{id}/inputs` request, upload files using
        `POST /test/{id}/files`, and request test re-runs using
        `PATCH /test/{id}`.
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testRequest"
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}:
    get:
      tags:
        - Retrieving test information
      description: |
        This operation returns information about a specific test request.

        TOS and TA clients can retrieve any test request; RSPs can only
        retrieve requests associated with their Client ID.
      operationId: getTestInfo
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

    patch:
      tags:
        - Starting, stopping and restarting tests
      description: |
        This operation allows test request properties such as the status or
        result to be changed.

        RSP clients can change the status of a test under the following
        circumstances:

          1. If the current status of the test is `completed`, and the `result`
             property is either `fail` or `error`, then the status can be
             changed to `inputs-needed`. The RSP can then update input
             parameters and files, and then request a re-test.
          2. If the current status of the test is `inputs-complete`, then the
             status can be changed to `ready`. This signals that the RSP is
             ready for the test to begin.
          <!-- this functionality will not be offered in the MVP
          3. if the current status of the test is `in-progress`, then the status
             can be changed to `inputs-needed`. This allows an in-progress test
             to be cancelled, and changed to a state where input parameters may
             be submitted prior to a re-test. -->

        TA clients can change the `result` property of a test from `fail` or
        `error` to `pass`, but only when the status of the test is `completed`.

        The TOS client can use this operation as follows:

          1. to update the status of a test from `ready` to `in-progress` (this
             also updates the `dateStarted` property, and clears the `results`
             property);
          2. to update the status of a test from `in-progress` to `completed`
             (this also updates the `dateCompleted` property). The `result`
             property MUST be specified as part of this operation.
      operationId: setTestStatus
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
        - name: status
          description: the new status for the test.
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/testStatus"
        - name: result
          description: the new result for the test (TA clients only).
          in: query
          schema:
            $ref: "#/components/schemas/testResult"
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

    delete:
      tags:
        - Test administration
      description: |
        Internal users can use the `DELETE` method to mark a test as deleted. If
        successful, it becomes invisible to `GET` requests (status 404) and will
        not appear in search results.
      operationId: deleteTest
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.
  /test/{id}/inputs:
    post:
      tags:
        - Providing input parameters & files
      description: |
        Submit test input parameters. The request payload will replace any
        previously submitted parameters.

        Input parameters can only be submitted for test request objects that
        have the status of `input-needed`.

        Once all required input parameters have been submitted (and any files
        referenced in those parameters have been uploaded), the status of
        the test request object will change from `input-needed` to `pending`.
      operationId: setTestInputParameters
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/inputParameters"
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}/files:
    post:
      tags:
        - Providing input parameters & files
      description: |
        Where tests require files to be provided as input parameters, this
        resource may be used to submit them as file uploads. Multiple files may
        be uploaded in a single request. If a filename matches a previously
        submitted file, that file will be replaced.

        All files MUST be referenced in an input parameter before being
        uploaded.
      operationId: uploadFile
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}/file/{filename}:
    get:
      tags:
        - Retrieving test information
      description: |
        This retrieves an uploaded file.
      operationId: getFile
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
        - name: filename
          description: the file name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful result.
          content:
            "application/octet-stream":
              schema:
                type: string
                fomat: binary
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /test/{id}/results:
    post:
      tags:
        - Test administration
      description: |
        This operation is used by the TOS client to update the object with
        test results. The POST will append the provided `testCaseLog` object to
        the `results` property of the object.
      operationId: addResult
      parameters:
        - name: id
          description: the test ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testCaseLog"
      responses:
        '201':
          description: A successful result.
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.

  /tests:
    get:
      tags:
        - Retrieving test information
      description: |
        Query the database for test request objects:
        * Internal clients will see all requests;
        * RSPs will see all requests associated with their client ID.
      operationId: getTests
      parameters:
        - name: client
          description: limit results to specific client (internal clients only).
          in: query
          required: false
          schema:
            type: string
        - name: tld
          description: limit results to specific TLD (internal clients only).
          in: query
          required: false
          schema:
            type: string
        - name: applicationID
          description: |
            limit results to specific application ID (internal clients only).
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: limit results to those with the given status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/testStatus"
        - name: result
          description: limit results to those with the given result
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/testResult"
      responses:
        '200':
          description: A successful result.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/testRequestSubmitted"
        '400':
          description: Returned when the server receives a malformed request.
        '403':
          description: Returned when the access control policy prevents access.
        '405':
          description: Returned when the request method is invalid.
        '429':
          description: Returned when the client has exceeded rate limits.
        '500':
          description: Returned when there has been an internal server error.
